The main point of this project is to play around with the programming language Clojure. In the end, I should have a functioning version of [[https://en.wikipedia.org/wiki/Conway%2527s_Game_of_Life][Conway's Game of Life]] (described below). At the least, the program should implement the logic for the game. Ideally, the program will also be able to display the evolution of a game. Really, though, the purpose of this is to become more familiar with Clojure and, to some degree, functional programming.

* The game

The concept is simple: If you have just enough people around, life will go on. If you're too crowded, you'll die. If you're too alone, you'll die. If the right number of people surround an empty area, life will extend to that area. Simple though the rules are, the results can be quite stunning.

The precise rules for the game are stated here, as taken from [[https://en.wikipedia.org/wiki/Conway's_Game_of_Life][Wikipedia]]:
1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by over-population.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

** The board

As said above, the Game of Life is played on a 2-dimentional board. This board is usually rectangular (simply by convention and convenience, it seems), and we will stick with that convention for simplicity. We want to handle a board that is an arbitrary (finite) size.

*** Board interface

Multiple representations are given below. We want to be able to use the representations interchangeably, so we need to have a consistent set of functions to interface with the code. The point of this section is to keep track of that interface to help maintain consistency.

Since this program is very basic, we really only need a few functions:
- =create-board= :: Create a random board from some provided parameters. Alternatively, create a board from user input (say a matrix or a list/vector of lists/vectors). In all likelihood, creating a board from user input will at most convert between representations.
- =update-board= or =evolve= :: Once we have a board, all we need to do is update it.

*** TODO Board design: nested lists

Since Clojure is a LISP, it makes sense to represent a 2-dimensional array as a list of lists (or vector of vectors).

*** TODO Board design: core.matrix

Even though LISPs work well with lists (and Clojure with vectors), I think that working with a matrix will result in cleaner code. That is the purpose of this implementation.
